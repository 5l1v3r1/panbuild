#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import yaml
import json
import sys
import argparse

# Local imports
# from toflatpak import snap
# FIXME why no over flatpak directly?
import snap


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        prog='2flatpak',
        description='2flatpak generates flatpak manifests from other packaging systems.'
    )
    # https://docs.python.org/3/library/argparse.html#the-add-argument-method
    # For the add_argument reference.
    parser.add_argument('-f --input-file', dest='input_file', help='An input file to create a Flatpak manifest from.')
    parser.add_argument('--input-format', dest='input_format', choices=['snap', 'deb', 'pyproject'], required=True,
                        help='The format of the input artifact.')
    # We support json and yaml because this is what Flatpak supports.
    parser.add_argument('-o --output-format', dest='output_format', choices=['json', 'yaml'], default='yaml',
                        help='The format of the resulting flatpak manifest.')
    parser.add_argument('-v', '--version', action='store_true', help="Print the current version number and exit.")
    args = parser.parse_args(sys.argv[1:])

    # Otherwise the format is JSON, as both formats are supported by Flatpak.
    output_format = args.output_format

    input_format = args.input_format

    input_content = None
    if args.input_file:
        input_content = open(args.input_file, 'r')
        # I'm so sure I have to do something about the encoding...
    else:
        input_content = ''
        for line in sys.stdin:
            input_content += line

    flatpak_manifest = {}
    if args.input_format == 'snap':
        flatpak_manifest = snap.to_flatpak(input_content)
    else:
        sys.stderr.write("{0} is not a valid input format! Available choices are [snap].".format(input_format))
        sys.exit(1)

    if output_format == 'yaml':
        print(yaml.dump(
            flatpak_manifest,
            default_flow_style=False,
            explicit_start=True,
            allow_unicode=True,
        ))
    elif output_format == 'json':
        print(json.dump(
            flatpak_manifest,
            default_flow_style=False,
            explicit_start=True,
            allow_unicode=True,
        ))
    else:
        sys.stderr.write("{0} is not a valid output format.".format(output_format))
        sys.exit(1)
